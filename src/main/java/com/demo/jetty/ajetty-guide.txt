服务端
==========================================================================================================
方式1
jetty Server+Servlet 提供restful服务

 // ServletContextHandler 设置basepath以及servlet和相应的子path
 ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
 context.setContextPath("/base");
 context.addServlet(new ServletHolder(new HelloServlet()), "/hello");  //localhost:8080/base/hello
 Server server=new Server(8080);//监听8080端口
 server.setHandler(context);
 server.start();

class HelloServlet extends HttpServlet {
 @Override
    protected void doGet(HttpServletRequest request,HttpServletResponse response) {
    .....
    .....
    }
}





==========================================================================================================
方式2
jetty Server + Handler  提供restful服务
AbstractHandler是一种Handler(处理器)，可以理解成一种和servlet作用类似的处理器
ContextHandler可以设置path以及相应的Handler


 Server server = new Server(8888);
 ContextHandler context = new ContextHandler();
 context.setContextPath("/test/"); // http://localhost:8888/test/xxx,
 context.setHandler(new HelloHandler());//setHandler(Handler handler)   通过setHandler来设置处理器
 server.setHandler(context);
 server.start();
 server.join();

class HelloHandler extends AbstractHandler {

    @Override
    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response){
    ...
    ...
    }
  }


==========================================================================================================
方式3
jetty erver+resteasy  提供restful服务
HttpServletDispatcher根据请求的url调用不同的controller


Server server=new Server(port);
ServletHolder servletHolder = new ServletHolder(HttpServletDispatcher.class);
servletHolder.setInitParameter("resteasy.resources","com.demo.jetty.jettydemo4.RestEasyController");//关联controller
servletHolder.setInitParameter("resteasy.servlet.mapping.prefix", "/rest/v1/");//resteasy前缀   http://localhost:8080/base/rest/v1/xxx

ServletContextHandler handler = new ServletContextHandler(ServletContextHandler.SESSIONS);
handler.setContextPath("/base");//设置上下问路径 http://localhost:8080/base
handler.addServlet(servletHolder, "/rest/*");//这里可以设置成/rest/*或者/rest/v1/*


@Path("/jtcontroller")
public class JettyController {

    @GET
    @Path("/subpath")
    @Consumes(MediaType.TEXT_PLAIN)
    public String getInfo() {
        return "hello jetty";
    }
}














websocket
==========================================================================================================
概览：
All WebSocket’s are created via whatever WebSocketCreator you have registered with the WebSocketServletFactory.
WebSocketServletFactory给WebSocketCreator提供注册服务，WebSocketCreator创建WebSocket


WebSocketServletFactory:
Basic WebSocketServletFactory for working with Jetty-based WebSocketServlets(比如带有@WebSocket注解的类);

情形1：
WebSocketCreator.register(Class<?> websocket)（这里的websocket可以是带有@WebSocket注解的类）
By default, the WebSocketServletFactory is a simple WebSocketCreator capable of creating a single WebSocket object.
Use  WebSocketCreator.register(Class<?> websocket) to tell the WebSocketServletFactory which class it
should instantiate (make sure it has a default constructor).
默认情况下，可以通过WebSocketCreator.register(Class<?> websocket)直接创建websocket, 这个过程中Register a websocket class com.demo.pojo with the default WebSocketCreator；可以理解为默认的WebSocketCreator已经提前注册好

情形2：
webSocketServletFactory.setCreator(WebSocketCreator var1)
When you want a custom WebSocketCreator, use WebSocketServletFactory.setCreator(WebSocketCreator creator)
and the WebSocketServletFactory will use your creator for all incoming Upgrade requests on this servlet.用来注册WebSocketCreator
通过webSocketServletFactory.setCreator(WebSocketCreator var1)自定义WebSocketCreator




WebSocketCreator
所有的WebSocket对象都是通过 自定义的WebSocketCreator或者默认WebSocketCreator创建的

情形1
WebSocketCreator.register(Class<?> websocket)通过默认WebSocketCreator创建WebSocket对象（这里的websocket可以是带有@WebSocket注解的类）

情形2：
webSocketServletFactory.setCreator(new MyAdvancedEchoCreator());

eg:
public class MyAdvancedEchoCreator  implements WebSocketCreator {
    AnnotatedEchoSocket annotatedEchoSocket;

    public MyAdvancedEchoCreator() {
        annotatedEchoSocket = new AnnotatedEchoSocket();
    }
    return annotatedEchoSocket;
  }

















websocket客户端
==========================================================================================================

 restful客户端
 org.eclipse.jetty.client.HttpClient去call服务端restful api
 HttpClient httpClient = new HttpClient();
 httpClient.start();
 ContentResponse response=httpClient.newRequest("http://localhost:8080/base/hi?name=ocean&passwd=123123").method(HttpMethod.GET).send()
 ContentResponse response = httpClient.GET("http://localhost:8080/base/hi?name=ocean&passwd=123123");
 String contentAsString = response.getContentAsString();
 httpClient.stop();











 websocket客户端

 形式1：
 通过继承WebSocketClient使得子类成为具备客户端性质的websocket，也就是自己本身是一个websocket class,
 并且能够对server端的websocket发起主动连接

 public class MyWebSocketClient extends WebSocketClient {

      public static void main(String[] args) {
        MyWebSocketClient myClient=new MyWebSocketClient(""ws://127.0.0.1:7778/test2/"")
        myClient.connect();
      }


      public MyWebSocketClient(String url) throws URISyntaxException {
         super(new URI(url));
     }

      @Override
      public void onOpen(ServerHandshake shake){...}

       @Override
       public void onMessage(String paramString){...}

       @Override
       public void onClose(int paramInt, String paramString, boolean paramBoolean){...}
 }





形式2：
@WebSocket +  WebSocketClient
@WebSocket标记MySocketClient是一个websocket class,
WebSocketClient 能够connect 客户端websocket连接服务端websocket

@WebSocket(maxTextMessageSize = 64 * 1024)
public class MySocketClient {

    private String id;

    public MySocketClient(String id) {
        this.id = id;
    }

    @OnWebSocketMessage
    public void onMessage(Session session, String message){...}

    @OnWebSocketConnect
    public void onConnect(Session session) {...}


    public static void main(String[] args) throws Exception {
        WebSocketClient client = new WebSocketClient();
        client.start();

        MySocketClient mySocketClient=new MySocketClient();
        URI echoUri = new URI("ws://127.0.0.1:8080/base/path1/");
        ClientUpgradeRequest request = new ClientUpgradeRequest();

        //connect(客户端websocket对象，服务端websocketurl, 升级请求)
        Future<Session> session = client.connect(mySocketClient, echoUri, request);
        session.get(60, TimeUnit.SECONDS).setIdleTimeout(0);
    }
}

















服务端websocket:

形式1：
jetty server + @WebSocket + WebSocketServlet
jetty server 对外提供web服务（这里是websocket服务）
@WebSocket表明注解的类是websocket class
WebSocketServlet用来初始化websocket class， 并且使得websocket class具备servlet性质


@WebSocket
public class AnnotatedEchoSocket extends WebSocketServlet{

    @OnWebSocketConnect
    public void onText(Session session){...}

     @OnWebSocketClose
     public void onClose(int i, String string){...}

      @OnWebSocketMessage
      public void onMessage(String msg){...}

}


public class StartServer {
    public static void main(String[] args) throws Exception {
        Server server=new Server(8080);

        ServletContextHandler handler = new ServletContextHandler(ServletContextHandler.SESSIONS);
        handler.setContextPath("/base");  //设置上下问路径 ws://localhost:8080/base

        handler.addServlet(new ServletHolder(AnnotatedEchoSocket.class), "/path1/"); //ws://localhost:8080/base/path1/
        server.setHandler(handler);
        server.start();

        server.join();
    }
}





形式2：
jetty server + @WebSocket + Handler
jetty server 对外提供web服务（这里是websocket服务）
@WebSocket表明注解的类是websocket class
WebSocketHandler用来初始化websocket class， 在websocket class上包一层hanler

@WebSocket
public class AnnotatedEchoSocket extends WebSocketServlet{

    @OnWebSocketConnect
    public void onText(Session session){...}

     @OnWebSocketClose
     public void onClose(int i, String string){...}

      @OnWebSocketMessage
      public void onMessage(String msg){...}

}




public class StartServer2 {

    public static void main(String args[]) {
        WebSocketHandler handler = new WebSocketHandler() {
            @Override
            public void configure(WebSocketServletFactory webSocketServletFactory) {
                webSocketServletFactory.register(AnnotatedEchoSocket2.class);
            }
        };


        ContextHandler context = new ContextHandler();
        context.setContextPath("/test2/");   //ws://127.0.0.1:7778/test2/
        context.setHandler(handler);

        Server server = new Server(7778);
        server.setHandler(context);
            server.start();

    }
}






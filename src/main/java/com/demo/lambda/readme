使用条件：
并非任何接口都支持lambda表达式,而适用于lambda表达式的接口称之为函数型接口。
函数式接口，当然首先是一个接口，然后就是在这个接口里面只能有一个抽象方法。


缺点：
使用Lambda表达式会减弱代码的可读性，而且Lambda表达式的使用局限性比较强，只能适用于接口只有一个抽象方法时使用，不宜调试。
//Java8之前：
new Thread(new Runnable(){
    @Override
    public void run(){
        System.out.println("Before Java8, too much code for too little to do");
    }
}).start

//Java8：
new Thread(() ->System.out.println("Before Java8, too much code for too little to do").start();







使用语法：
 形参 -> 代码块
->是Lambda运算符，其左边部分是输入参数, 数量可以为0、1或者多个;
只有当输入参数为1时，Lambda表达式左边的一对小括弧才可以省略;
输入参数的数量大于或者等于2时，Lambda表达式左边的一对小括弧中的多个参数质检使用逗号（,）分割。
右边是方法体，若方法体只有一条语句，可以省略花括号





常见用途：
1 构造函数型接口的实例对象作为参数
public interface ICar {
void drive();
}

public static void driveCar(ICar car){
//.....
}

driveCar(()-> System.out.println("BMW"));


2 构造函数型接口的实例对象作为函数返回值
@Component
public class InitializeCommand {

@Bean
public CommandLineRunner registerService() {
return args -> {}；//用lambda表达式可以构造函数型接口的实例对象作为函数返回值

}



